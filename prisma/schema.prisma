// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Wallet {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  address    String   @unique
  privateKey String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User?
}

model User {
  // basic info
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  email            String   @unique
  name             String?
  username         String   @unique
  password         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  avatar           String?
  shortDescription String?
  longDescription  String?

  // version
  version Int @default(0)

  // video
  Playlist Playlist[]
  Videos   Video[]

  // web3
  Wallet   Wallet @relation(fields: [walletId], references: [id])
  walletId String @unique @db.ObjectId

  Followings  SubscriptionRelation[] @relation("following")
  Subscribers SubscriptionRelation[]
}

model SubscriptionRelation {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  user      User   @relation(fields: [userId], references: [id])
  following User   @relation("following", fields: [followingUserId], references: [id])

  userId          String
  followingUserId String
}

model Playlist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  videos      Video[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Video {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  title           String
  fileName        String
  description     String
  thumbnail       String?
  views           Int              @default(0)
  likes           Int              @default(0)
  dislikes        Int              @default(0)
  comments        Comment[]
  transcoding     Transcoding[]
  analyzingResult AnalyzingResult?
  User            User             @relation(fields: [userId], references: [id])
  userId          String
  Playlist        Playlist?        @relation(fields: [playlistId], references: [id])
  playlistId      String?          @db.ObjectId
  status          VideoStatus      @default(UPLOADING)
  SalesInfo       SalesInfo?

  version Int @default(0)

  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId
}

model SalesInfo {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  // price
  price     Int
  tokenId   String?   @unique
  // video
  Video     Video     @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoId   String    @unique
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  Video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  Videos    Video[]

  // sub categories
  subCategories Category[] @relation("SubCategories")
  parent        Category?  @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId      String?    @db.ObjectId
}

model AnalyzingResult {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quality   String
  Video     Video    @relation(fields: [videoId], references: [id])
  videoId   String   @unique @db.ObjectId
}

model Transcoding {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  Video         Video             @relation(fields: [videoId], references: [id])
  targetQuality String
  videoId       String
  status        TranscodingStatus @default(PENDING)
  progress      Int
  url           String?

  // unique together with videoId and targetQuality
  @@unique([videoId, targetQuality])
}

enum VideoStatus {
  UPLOADING
  UPLOADED
  ANALYZING
  TRANSCODING
  READY
  FAILED
}

enum TranscodingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
