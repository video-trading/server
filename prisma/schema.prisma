// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Wallet {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  address    String   @unique
  privateKey String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User?
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Playlist Playlist[]
  Videos   Video[]

  Wallet   Wallet @relation(fields: [walletId], references: [id])
  walletId String @unique @db.ObjectId
}

model Playlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  videos    Video[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  title           String
  fileName        String
  description     String
  url             String?
  thumbnail       String?
  views           Int              @default(0)
  likes           Int              @default(0)
  dislikes        Int              @default(0)
  comments        Comment[]
  transcoding     Transcoding[]
  analyzingResult AnalyzingResult?
  User            User             @relation(fields: [userId], references: [id])
  userId          String
  Playlist        Playlist?        @relation(fields: [playlistId], references: [id])
  playlistId      String?          @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  Video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
}

model AnalyzingResult {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quality   String
  Video     Video    @relation(fields: [videoId], references: [id])
  videoId   String   @unique @db.ObjectId
}

model Transcoding {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Video         Video    @relation(fields: [videoId], references: [id])
  targetQuality String
  videoId       String
  status        String
  progress      Int
  url           String?

  // unique together with videoId and targetQuality
  @@unique([videoId, targetQuality])
}
